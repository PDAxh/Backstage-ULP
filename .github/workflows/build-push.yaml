name: Build and Push Backstage Image

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backstage/**'
      - '.github/workflows/build-push.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backstage/**'
      - '.github/workflows/build-push.yaml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/backstage-ulp

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backstage
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push development image
        if: github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v5
        with:
          context: ./backstage
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: backstage/yarn.lock

      - name: Install dependencies
        working-directory: ./backstage
        run: yarn install --frozen-lockfile

      - name: Run tests
        working-directory: ./backstage
        run: yarn test

      - name: Run linting
        working-directory: ./backstage
        run: yarn lint

  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development

    steps:
      - name: Deploy to development
        run: |
          echo "Deploying to development environment"
          # Add your deployment logic here
          # This could be kubectl apply, helm upgrade, or ArgoCD sync
